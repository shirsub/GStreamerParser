<?xml version="1.0" ?><!DOCTYPE refentry  PUBLIC '-//OASIS//DTD DocBook XML V4.1.2//EN'  'http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY % version-entities SYSTEM "version.entities">
%version-entities;
]><refentry id="gst-plugins-good-plugins-waveformsink">
<refmeta>
<refentrytitle id="gst-plugins-good-plugins-waveformsink.top_of_page" role="top_of_page">waveformsink</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GST-PLUGINS-GOOD-PLUGINS Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>waveformsink</refname>
<refpurpose/>
</refnamediv>

<refsect1 id="gst-plugins-good-plugins-waveformsink.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable frame="none" pgwide="1" role="enum_members_table">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GstWaveFormSink">GstWaveFormSink</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="gst-plugins-good-plugins-waveformsink.description" role="desc">
<title role="desc.title">Description</title>
<para>This element lets you output sound using the Windows WaveForm API.</para>
<para>Note that you should almost always use generic audio conversion elements
like audioconvert and audioresample in front of an audiosink to make sure
your pipeline works under all circumstances (those conversion elements will
act in passthrough-mode if no conversion is necessary).</para>
<refsect2>
<title>Example pipelines</title>
<informalexample><programlisting><![CDATA[
gst-launch-1.0 -v audiotestsrc ! audioconvert ! volume volume=0.1 ! waveformsink
]]></programlisting></informalexample> will output a sine wave (continuous beep sound) to your sound card (with
a very low volume as precaution).
<informalexample><programlisting><![CDATA[
gst-launch-1.0 -v filesrc location=music.ogg ! decodebin ! audioconvert ! audioresample ! waveformsink
]]></programlisting></informalexample> will play an Ogg/Vorbis audio file and output it.
</refsect2>

<include href="element-waveformsink-details.xml" xmlns="http://www.w3.org/2003/XInclude"><fallback xmlns="http://www.w3.org/2003/XInclude"/></include></refsect1>
<refsect1 id="gst-plugins-good-plugins-waveformsink.functions_details" role="details">
<title role="details.title">Functions</title>
<para/>
</refsect1>
<refsect1 id="gst-plugins-good-plugins-waveformsink.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GstWaveFormSink" role="struct">
<title>struct GstWaveFormSink</title>
<indexterm zone="GstWaveFormSink"><primary>GstWaveFormSink</primary></indexterm>
<programlisting language="C">struct GstWaveFormSink {
  /* parent object */
  GstAudioSink sink;

  /* supported caps */
  GstCaps *cached_caps;
  
  /* handle to the waveform-audio output device */
  HWAVEOUT hwaveout;
  
  /* table of buffer headers */
  WAVEHDR *wave_buffers;

  /* critical section protecting access to the number of free buffers */
  CRITICAL_SECTION critic_wave;

  /* number of free buffers available */
  guint free_buffers_count;
  
  /* current free buffer where you have to write incoming data */
  guint write_buffer;
  
  /* size of buffers streamed to the device */
  guint buffer_size;

  /* number of buffers streamed to the device */
  guint buffer_count;

  /* total of bytes in queue before they are written to the device */
  guint bytes_in_queue;

  /* bytes per sample from setcaps used to evaluate the number samples returned by delay */
  guint bytes_per_sample;

  /* wave form error string */
  gchar error_string[ERROR_LENGTH];
};
</programlisting>
</refsect2>

</refsect1>

</refentry>